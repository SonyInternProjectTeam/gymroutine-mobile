//
//  WorkoutService.swift
//  gymroutine-mobile
//
//  Created by Ï°∞ÏÑ±Ìôî on 2024/11/08.
//

import Foundation
import Firebase
import FirebaseFirestore

class WorkoutService {
    private let db = Firestore.firestore()
    
    // „ÉØ„Éº„ÇØ„Ç¢„Ç¶„Éà„Çí‰ΩúÊàê(Create)
    func createWorkout(workout: Workout) async -> Result<Void, Error> {
        let workoutDocumentRef = db.collection("Workouts").document()
        
        do {
            try workoutDocumentRef.setData(from: workout)
            return .success(())
        } catch {
            return .failure(error)
        }
    }
    
    /// Í∏∞Ï°¥ ÏõåÌÅ¨ÏïÑÏõÉ ÎèÑÌÅêÎ®ºÌä∏Ïùò ÏöîÏùº Îç∞Ïù¥ÌÑ∞Î•º ÏóÖÎç∞Ïù¥Ìä∏ (ÏÉàÎ°úÏö¥ Íµ¨Ï°∞ÏóêÏÑúÎäî ScheduledDaysÎäî [String] ÌÉÄÏûÖ)
    func updateScheduledDaysForWorkout(workoutID: String, scheduledDays: [String], completion: @escaping (Bool) -> Void) {
        db.collection("Workouts").document(workoutID).updateData([
            "ScheduledDays": scheduledDays
        ]) { error in
            if let error = error {
                print("Error updating scheduled days: \(error)")
                completion(false)
            } else {
                completion(true)
            }
        }
    }
    
    /// ÏõåÌÅ¨ÏïÑÏõÉÏùò exercises ÌïÑÎìúÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäî Î©îÏÑúÎìú
    func updateWorkoutExercises(workoutID: String, exercises: [WorkoutExercise]) async -> Result<Void, Error> {
        do {
            // Convert WorkoutExercise objects to Firestore-compatible dictionaries
            let exercisesData = exercises.map { exercise -> [String: Any] in
                var exerciseDict: [String: Any] = [
                    "id": exercise.id,
                    "name": exercise.name,
                    "part": exercise.part
                ]
                
                // Convert sets to array of dictionaries
                let setsArray = exercise.sets.map { set -> [String: Any] in
                    return [
                        "reps": set.reps,
                        "weight": set.weight
                    ]
                }
                
                exerciseDict["sets"] = setsArray
                return exerciseDict
            }
            
            try await db.collection("Workouts").document(workoutID).updateData([
                "exercises": exercisesData
            ])
            return .success(())
        } catch {
            print("üî• ÏõåÌÅ¨ÏïÑÏõÉ exercises ÏóÖÎç∞Ïù¥Ìä∏ ÏóêÎü¨: \(error.localizedDescription)")
            return .failure(error)
        }
    }
    
    /// ÏõåÌÅ¨ÏïÑÏõÉÏóê Ïö¥ÎèôÏùÑ Ï∂îÍ∞ÄÌïòÎäî Î©îÏÑúÎìú (ÏÉàÎ°úÏö¥ Ïö¥Îèô Íµ¨Ï°∞: name, part, Í∑∏Î¶¨Í≥† Îπà Sets Î∞∞Ïó¥)
    func addExerciseToWorkout(workoutID: String, exercise: WorkoutExercise, completion: @escaping (Bool) -> Void) {
        let exerciseData: [String: Any] = [
            "id": exercise.id,         // Í≥†Ïú† ID Ï†ÄÏû•
            "name": exercise.name,
            "part": exercise.part,
            "Sets": [] // Ï¥àÍ∏∞ ÏÑ∏Ìä∏ Î∞∞Ïó¥ (Îπà Î∞∞Ïó¥)
        ]
        
        db.collection("Workouts").document(workoutID).updateData([
            "exercises": FieldValue.arrayUnion([exerciseData])
        ]) { error in
            if let error = error {
                print("üî• ÏóêÌÅ¨ÏÑúÏÇ¨Ïù¥Ï¶à Ï∂îÍ∞Ä ÏóêÎü¨: \(error.localizedDescription)")
                completion(false)
            } else {
                print("‚úÖ ÏóêÌÅ¨ÏÑúÏÇ¨Ïù¥Ï¶àÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!")
                completion(true)
            }
        }
    }
    
    /// ÏõåÌÅ¨ÏïÑÏõÉ ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Î©îÏÑúÎìú (exercises ÌïÑÎìúÎèÑ ÎîîÏΩîÎî©)
    func fetchWorkoutById(workoutID: String) async throws -> Workout {
        let documentSnapshot = try await db.collection("Workouts").document(workoutID).getDocument()
        
        guard documentSnapshot.exists else {
            throw NSError(domain: "Firestore", code: 404, userInfo: [NSLocalizedDescriptionKey: "Workout not found"])
        }
        
        // Firestore Î¨∏ÏÑúÎ•º Workout Î™®Îç∏Î°ú Î≥ÄÌôò
        do {
            var workout = try documentSnapshot.data(as: Workout.self)
            workout.id = documentSnapshot.documentID
            return workout
        } catch {
            print("üî• ÏõåÌÅ¨ÏïÑÏõÉ ÎîîÏΩîÎî© ÏóêÎü¨: \(error.localizedDescription)")
            throw error
        }
    }
    
    /// ÂºïÊï∞„ÅÆ„É¶„Éº„Ç∂„Éº„ÅåÁôªÈå≤Ê∏à„Åø„ÅÆ„ÉØ„Éº„ÇØ„Ç¢„Ç¶„Éà„ÇíÂÖ®„Å¶ÂèñÂæó
    func fetchUserWorkouts(uid: String) async -> [Workout]? {
        let db = Firestore.firestore()
        let workoutsRef = db.collection("Workouts").whereField("userId", isEqualTo: uid)
        
        do {
            let snapshot = try await workoutsRef.getDocuments()
            var workouts: [Workout] = []
            
            for document in snapshot.documents {
                do {
                    let workout = try document.data(as: Workout.self)
                    workouts.append(workout)
                } catch {
                    print("[ERROR] Workout„ÅÆ„Éá„Ç≥„Éº„Éâ„Ç®„É©„Éº: \(error)")
                }
            }
            return workouts
            
        } catch {
            print("[ERROR] Firestore ÂèñÂæó„Ç®„É©„Éº: \(error)")
            return nil
        }
    }
    
    /// Ïö¥Îèô ÏòµÏÖò(Trains Ïª¨Î†âÏÖò) Î∂àÎü¨Ïò§Í∏∞
    func fetchTrainOptions(completion: @escaping ([String]) -> Void) {
        db.collection("Trains").getDocuments { (snapshot, error) in
            guard let documents = snapshot?.documents, error == nil else {
                print("Error fetching train options: \(String(describing: error))")
                completion([])
                return
            }
            let options = documents.map { $0.documentID }
            completion(options)
        }
    }
    
    /// ÌäπÏ†ï Ìä∏Î†àÏù∏Ïùò Ïö¥Îèô Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞
    func fetchExercises(for train: String, completion: @escaping ([String]) -> Void) {
        db.collection("Trains").document(train).collection("exercises").getDocuments { (snapshot, error) in
            guard let documents = snapshot?.documents, error == nil else {
                print("Error fetching exercises: \(String(describing: error))")
                completion([])
                return
            }
            let exercises = documents.map { $0.documentID }
            completion(exercises)
        }
    }
    
    // MARK: - Workout Result Saving
    
    /// ÏõåÌÅ¨ÏïÑÏõÉ Í≤∞Í≥ºÎ•º FirestoreÏóê Ï†ÄÏû•ÌïòÎäî Ìï®Ïàò
    /// - Parameters:
    ///   - userId: ÏÇ¨Ïö©Ïûê ID
    ///   - result: Ï†ÄÏû•Ìï† WorkoutResultModel Îç∞Ïù¥ÌÑ∞
    func saveWorkoutResult(userId: String, result: WorkoutResultModel) async -> Result<Void, Error> {
        // ÏõîÎ≥Ñ ÏÑúÎ∏å Ïª¨Î†âÏÖò Í≤ΩÎ°ú ÏÉùÏÑ± (YYYYMM)
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyyMM"
        let monthCollectionId = dateFormatter.string(from: result.createdAt.dateValue())
        
        // Firestore Í≤ΩÎ°ú ÏÑ§Ï†ï - Î¨∏ÏÑú ID ÏûêÎèô ÏÉùÏÑ±
        let resultDocRef = db.collection("Result")
            .document(userId)
            .collection(monthCollectionId)
            .document() // << Î¨∏ÏÑú ID ÏûêÎèô ÏÉùÏÑ±ÏùÑ ÏúÑÌï¥ Ïù∏Ïûê ÏóÜÏù¥ Ìò∏Ï∂ú
        
        do {
            // WorkoutResultModelÏùÑ FirestoreÏóê ÏßÅÏ†ë Ïù∏ÏΩîÎî©ÌïòÏó¨ Ï†ÄÏû•
            // ÏûêÎèô ÏÉùÏÑ±Îêú IDÎ•º Î™®Îç∏Ïóê Ï†ÄÏû•Ìï† ÌïÑÏöîÎäî ÏóÜÏßÄÎßå, ÌïÑÏöî Ïãú resultDocRef.documentIDÎ°ú Ï†ëÍ∑º Í∞ÄÎä•
            try resultDocRef.setData(from: result) // mergeÎäî ÏÉà Î¨∏ÏÑúÏù¥ÎØÄÎ°ú Î∂àÌïÑÏöî
            print("‚úÖ ÏõåÌÅ¨ÏïÑÏõÉ Í≤∞Í≥º Ï†ÄÏû• ÏÑ±Í≥µ: \(userId) / \(monthCollectionId) / \(resultDocRef.documentID)") // ÏûêÎèô ÏÉùÏÑ± ID Î°úÍ∑∏ Ï∂úÎ†•
            return .success(())
        } catch {
            print("üî• ÏõåÌÅ¨ÏïÑÏõÉ Í≤∞Í≥º Ï†ÄÏû• Ïã§Ìå®: \(error.localizedDescription)")
            return .failure(error)
        }
    }
    
    // MARK: - Workout Result Fetching

    /// ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏùò ÌäπÏ†ï ÏõîÏùò ÌäπÏ†ï Ïö¥Îèô Í≤∞Í≥ºÎ•º IDÎ°ú Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
    /// - Parameters:
    ///   - userId: ÏÇ¨Ïö©Ïûê ID
    ///   - month: Ï°∞ÌöåÌï† Ïõî (YYYYMM ÌòïÏãù Î¨∏ÏûêÏó¥)
    ///   - resultId: Í∞ÄÏ†∏Ïò¨ Í≤∞Í≥ºÏùò Î¨∏ÏÑú ID
    func fetchWorkoutResultById(userId: String, month: String, resultId: String) async throws -> WorkoutResultModel {
        let resultDocRef = db.collection("Result") // Base collection is "Result"
            .document(userId)
            .collection(month) // Subcollection is "YYYYMM"
            .document(resultId)

        do {
            let documentSnapshot = try await resultDocRef.getDocument()
            guard documentSnapshot.exists else {
                throw NSError(domain: "Firestore", code: 404, userInfo: [NSLocalizedDescriptionKey: "Workout result not found for ID: \(resultId) in month \(month)"])
            }
            
            let result = try documentSnapshot.data(as: WorkoutResultModel.self)
            print("‚úÖ Successfully fetched workout result: \(resultId)")
            return result
        } catch {
            print("üî• Error fetching workout result \(resultId): \(error.localizedDescription)")
            throw error
        }
    }
    
    // TODO: Consider adding a function to fetch all results for a given month or date range if needed for Calendar view etc.
}
